package cmd

import (
	"bytes"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"sort"
	"strings"
	"time"

	"github.com/spf13/cobra"
)

// docsCmd represents the password command
var docsCmd = &cobra.Command{
	Use:    "docs",
	Short:  "Generate docs",
	Hidden: true,
	Run: func(cmd *cobra.Command, args []string) {
		generateDocs(RootCmd)
		fmt.Println("generated docs")
	},
	PersistentPreRunE: func(cmd *cobra.Command, args []string) error {
		return nil
	},
}

func init() {
	RootCmd.AddCommand(docsCmd)
}

// GenMarkdownTreeCustom is the the same as GenMarkdownTree, but
// with custom filePrepender and linkHandler.
func generateDocs(cmd *cobra.Command) error {
	dir := "./"
	basename := "COMMANDS.md" //strings.Replace(cmd.CommandPath(), " ", "_", -1) + ".md"
	filename := filepath.Join(dir, basename)
	f, err := os.Create(filename)
	if err != nil {
		return err
	}
	defer f.Close()

	buf := new(bytes.Buffer)

	if err := generateMarkdownTree(cmd, buf, 0); err != nil {
		return err
	}

	if _, err := buf.WriteTo(f); err != nil {
		return err
	}

	return nil
}
func generateMarkdownTree(cmd *cobra.Command, w io.Writer, depth int) error {
	if err := generateMarkdown(cmd, w, depth); err != nil {
		return err
	}

	for _, c := range cmd.Commands() {
		if !c.IsAvailableCommand() || c.IsAdditionalHelpTopicCommand() {
			continue
		}
		if err := generateMarkdownTree(c, w, 1); err != nil {
			return err
		}
	}

	return nil
}

func generateMarkdown(cmd *cobra.Command, w io.Writer, depth int) error {
	cmd.InitDefaultHelpCmd()
	cmd.InitDefaultHelpFlag()

	buf := new(bytes.Buffer)
	name := cmd.CommandPath()

	if depth == 0 {
		buf.WriteString("# Commands\n\n")
	}

	buf.WriteString("## " + name + "\n\n")

	if len(cmd.Short) > 0 {
		buf.WriteString(cmd.Short + "\n\n")
	}
	if len(cmd.Long) > 0 {
		var long string
		long = strings.Replace(cmd.Long, "ldproxy", "[ldproxy](https://github.com/interactive-instruments/ldproxy)", 1)
		//buf.WriteString("### Synopsis\n\n")
		buf.WriteString(long + "\n\n")
	}

	if cmd.Runnable() {
		buf.WriteString(fmt.Sprintf("```\n%s\n```\n\n", cmd.UseLine()))
	}

	if len(cmd.Example) > 0 {
		buf.WriteString("#### Examples\n\n")
		buf.WriteString(fmt.Sprintf("```\n%s\n```\n\n", cmd.Example))
	}

	if err := printOptions(buf, cmd, name); err != nil {
		return err
	}
	if hasSeeAlso(cmd) {
		buf.WriteString("#### See Also\n\n")
		if cmd.HasParent() {
			parent := cmd.Parent()
			pname := parent.CommandPath()
			link := "#" + pname
			link = strings.Replace(link, " ", "-", -1)
			short := ""
			if len(parent.Short) > 0 {
				short = fmt.Sprintf("\t - %s", parent.Short)
			}
			buf.WriteString(fmt.Sprintf("* [%s](%s)%s\n", pname, link, short))
			cmd.VisitParents(func(c *cobra.Command) {
				if c.DisableAutoGenTag {
					cmd.DisableAutoGenTag = c.DisableAutoGenTag
				}
			})
		}

		children := cmd.Commands()
		sort.Sort(byName(children))

		for _, child := range children {
			if !child.IsAvailableCommand() || child.IsAdditionalHelpTopicCommand() {
				continue
			}
			cname := name + " " + child.Name()
			link := "#" + cname
			link = strings.Replace(link, " ", "-", -1)
			short := ""
			if len(child.Short) > 0 {
				short = fmt.Sprintf("\t - %s", child.Short)
			}
			buf.WriteString(fmt.Sprintf("* [%s](%s)%s\n", cname, link, short))
		}
		buf.WriteString("\n")
	}
	if !cmd.DisableAutoGenTag {
		buf.WriteString("###### Auto generated by spf13/cobra on " + time.Now().Format("2-Jan-2006") + "\n")
	}
	_, err := buf.WriteTo(w)
	return err
}

func printOptions(buf *bytes.Buffer, cmd *cobra.Command, name string) error {
	flags := cmd.NonInheritedFlags()
	flags.SetOutput(buf)
	if flags.HasAvailableFlags() {
		buf.WriteString("#### Options\n\n```\n")
		flags.PrintDefaults()
		buf.WriteString("```\n\n")
	}

	parentFlags := cmd.InheritedFlags()
	parentFlags.SetOutput(buf)
	if parentFlags.HasAvailableFlags() {
		buf.WriteString("#### Options inherited from parent commands\n\n```\n")
		parentFlags.PrintDefaults()
		buf.WriteString("```\n\n")
	}
	return nil
}

func hasSeeAlso(cmd *cobra.Command) bool {
	if cmd.HasParent() {
		return true
	}
	for _, c := range cmd.Commands() {
		if !c.IsAvailableCommand() || c.IsAdditionalHelpTopicCommand() {
			continue
		}
		return true
	}
	return false
}

type byName []*cobra.Command

func (s byName) Len() int           { return len(s) }
func (s byName) Swap(i, j int)      { s[i], s[j] = s[j], s[i] }
func (s byName) Less(i, j int) bool { return s[i].Name() < s[j].Name() }
